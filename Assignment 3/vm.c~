#include "param.h"
#include "types.h"
#include "defs.h"
#include "x86.h"
#include "memlayout.h"
#include "mmu.h"
#include "proc.h"
#include "elf.h"

extern char data[];  // defined by kernel.ld
struct segdesc gdt[NSEGS];



int lazyPageAlloc(pde_t * proc_pgdir, uint target_va);
// Set up CPU's kernel segment descriptors.
// Run once on entry on each CPU.
void
seginit(void)
{
  struct cpu *c;

  // Map "logical" addresses to virtual addresses using identity map.
  // Cannot share a CODE descriptor for both kernel and user
  // because it would have to have DPL_USR, but the CPU forbids
  // an interrupt from CPL=0 to DPL=3.
  c = &cpus[cpunum()];  

  c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
  c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
  c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
  c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);

  // Map cpu, and curproc
  c->gdt[SEG_KCPU] = SEG(STA_W, &c->cpu, 8, 0);

  lgdt(c->gdt, sizeof(c->gdt));
  loadgs(SEG_KCPU << 3);
  
  // Initialize cpu-local storage.
  cpu = c;
  proc = 0;
}

// Return the address of the PTE in page table pgdir
// that corresponds to virtual address va.  If alloc!=0,
// create any required page table pages.
static pte_t *
walkpgdir(pde_t *pgdir, const void *va, int alloc)
{
  pde_t *pde;
  pte_t *pgtab;

  pde = &pgdir[PDX(va)];
  if(*pde & PTE_P){
    pgtab = (pte_t*)p2v(PTE_ADDR(*pde));
  } else {
    if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
      return 0;
    // Make sure all those PTE_P bits are zero.
//     cprintf(".");
//     cprintf("allocated new PTE! it is allocated to vaddr: %x\n", pgtab);
    memset(pgtab, 0, PGSIZE);
    // The permissions here are overly generous, but they can
    // be further restricted by the permissions in the page table 
    // entries, if necessary.
    *pde = v2p(pgtab) | PTE_P | PTE_W | PTE_U;
  }
  return &pgtab[PTX(va)];
}

// Create PTEs for virtual addresses starting at va that refer to
// physical addresses starting at pa. va and size might not
// be page-aligned.
int
mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
{
  char *a, *last;
  pte_t *pte;
  
  a = (char*)PGROUNDDOWN((uint)va);
  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
  for(;;){
    if((pte = walkpgdir(pgdir, a, 1)) == 0)
      return -1;
    if(*pte & PTE_P)
      panic("remap");
    *pte = pa | perm | PTE_P;
    if(a == last)
      break;
    a += PGSIZE;
    pa += PGSIZE;
  }
  return 0;
}

// There is one page table per process, plus one that's used when
// a CPU is not running any process (kpgdir). The kernel uses the
// current process's page table during system calls and interrupts;
// page protection bits prevent user code from using the kernel's
// mappings.
// 
// setupkvm() and exec() set up every page table like this:
//
//   0..KERNBASE: user memory (text+data+stack+heap), mapped to
//                phys memory allocated by the kernel
//   KERNBASE..KERNBASE+EXTMEM: mapped to 0..EXTMEM (for I/O space)
//   KERNBASE+EXTMEM..data: mapped to EXTMEM..V2P(data)
//                for the kernel's instructions and r/o data
//   data..KERNBASE+PHYSTOP: mapped to V2P(data)..PHYSTOP, 
//                                  rw data + free physical memory
//   0xfe000000..0: mapped direct (devices such as ioapic)
//
// The kernel allocates physical memory for its heap and for user memory
// between V2P(end) and the end of physical memory (PHYSTOP)
// (directly addressable from end..P2V(PHYSTOP)).

// This table defines the kernel's mappings, which are present in
// every process's page table.
static struct kmap {
  void *virt;
  uint phys_start;
  uint phys_end;
  int perm;
} kmap[] = {
 { (void*)KERNBASE, 0,             EXTMEM,    PTE_W}, // I/O space
 { (void*)KERNLINK, V2P(KERNLINK), V2P(data), 0},     // kern text+rodata
 { (void*)data,     V2P(data),     PHYSTOP,   PTE_W}, // kern data+memory
 { (void*)DEVSPACE, DEVSPACE,      0,         PTE_W}, // more devices
};

// Set up kernel part of a page table.
pde_t*
setupkvm(void)
{
  pde_t *pgdir;
  struct kmap *k;

  if((pgdir = (pde_t*)kalloc()) == 0)
    return 0;
  memset(pgdir, 0, PGSIZE);
  if (p2v(PHYSTOP) > (void*)DEVSPACE)
    panic("PHYSTOP too high");
  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start, 
                (uint)k->phys_start, k->perm) < 0)
      return 0;
  return pgdir;
}

// Allocate one page table for the machine for the kernel address
// space for scheduler processes.
void
kvmalloc(struct cpu *c)
{
  c->kpgdir = setupkvm();
  switchkvm(c);
}

// Switch h/w page table register to the kernel-only page table,
// for when no process is running.
void
switchkvm(struct cpu *c)
{
  pushcli();
  clearTLB(cpu->kpgdir);
  popcli();
  lcr3(v2p(c->kpgdir));   // switch to the kernel page table
}

// Switch TSS and h/w page table to correspond to process p.
void
switchuvm(struct proc *p)
{
  pushcli();
  cpu->gdt[SEG_TSS] = SEG16(STS_T32A, &cpu->ts, sizeof(cpu->ts)-1, 0);
  cpu->gdt[SEG_TSS].s = 0;
  cpu->ts.ss0 = SEG_KDATA << 3;
  cpu->ts.esp0 = (uint)proc->kstack + KSTACKSIZE;
  ltr(SEG_TSS << 3);
  if(p->pgdir == 0)
    panic("switchuvm: no pgdir");
  clearTLB(cpu->kpgdir);
//   lcr3(v2p(p->pgdir));  // switch to new address space
  popcli();
}

// Load the initcode into address 0 of pgdir.
// sz must be less than a page.
void
inituvm(pde_t *pgdir, char *init, uint sz)
{
  char *mem;
  
  if(sz >= PGSIZE)
    panic("inituvm: more than a page");
  mem = kalloc();
  memset(mem, 0, PGSIZE);
  mappages(pgdir, 0, PGSIZE, v2p(mem), PTE_W|PTE_U);
  memmove(mem, init, sz);
}

// Load a program segment into pgdir.  addr must be page-aligned
// and the pages from addr to addr+sz must already be mapped.
int
loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)
{
  uint i, pa, n;
  pte_t *pte;

  if((uint) addr % PGSIZE != 0)
    panic("loaduvm: addr must be page aligned");
  for(i = 0; i < sz; i += PGSIZE){
    if((pte = walkpgdir(pgdir, addr+i, 0)) == 0) {
       panic("loaduvm: address should exist");
       /*
      cprintf("loaduvm. lazy alloc for vm: %x\n", (uint)(addr+i));
      if (0 == lazyPageAlloc(pgdir, (uint)(addr+i))) {
	cprintf("lazyPageAlloc Failed in loaduvm\n");
	return -1;
      }*/
    }
    pa = PTE_ADDR(*pte);
    if(sz - i < PGSIZE)
      n = sz - i;
    else
      n = PGSIZE;
    if(readi(ip, p2v(pa), offset+i, n) != n)
      return -1;
  }
  return 0;
}

// Allocate page tables and physical memory to grow process from oldsz to
// newsz, which need not be page aligned.  Returns new size or 0 on error.
int
allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
{
  char *mem;
  uint a;
  
  if(newsz >= KERNBASE)
    return 0;
  if(newsz < oldsz)
    return oldsz;

  a = PGROUNDUP(oldsz);
  for(; a < newsz; a += PGSIZE){
    mem = kalloc();
    if(mem == 0){
      cprintf("allocuvm out of memory\n");
      deallocuvm(pgdir, newsz, oldsz);
      return 0;
    }
    memset(mem, 0, PGSIZE);
    mappages(pgdir, (char*)a, PGSIZE, v2p(mem), PTE_W|PTE_U);
  }
  
  return newsz;
}

// Deallocate user pages to bring the process size from oldsz to
// newsz.  oldsz and newsz need not be page-aligned, nor does newsz
// need to be less than oldsz.  oldsz can be larger than the actual
// process size.  Returns the new process size.
int
deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
{
  pte_t *pte;
  uint a, pa;

  if(newsz >= oldsz)
    return oldsz;

  a = PGROUNDUP(newsz);
  for(; a  < oldsz; a += PGSIZE){
    pte = walkpgdir(pgdir, (char*)a, 0);
    if(!pte)
      a += (NPTENTRIES - 1) * PGSIZE;
    else if((*pte & PTE_P) != 0){
      pa = PTE_ADDR(*pte);
      if(pa == 0){
	cprintf("deallocuvm panic\n");
        panic("kfree");
      }
      char *v = p2v(pa);
      kfree(v);
      *pte = 0;
    }
  }
  return newsz;
}

// Free a page table and all the physical memory pages
// in the user part.
void
freevm(pde_t *pgdir)
{
  uint i;

  if(pgdir == 0)
    panic("freevm: no pgdir");
  //cprintf("kernel freevm - before dealloc\n");
  deallocuvm(pgdir, KERNBASE, 0);
  //cprintf("kernel freevm - after dealloc\n");
  for(i = 0; i < NPDENTRIES; i++){
    if(pgdir[i] & PTE_P){
      char * v = p2v(PTE_ADDR(pgdir[i]));
//       cprintf("freeing pagetable v: %x\n",v);
      kfree(v);
    }
  }
  //cprintf("all pagetables are gone\n");
  kfree((char*)pgdir);
  //cprintf("freevm done!\n");
}

// Clear PTE_U on a page. Used to create an inaccessible
// page beneath the user stack.
void
clearpteu(pde_t *pgdir, char *uva)
{
  pte_t *pte;

  pte = walkpgdir(pgdir, uva, 0);
  if(pte == 0)
    panic("clearpteu");
  *pte &= ~PTE_U;
}

// Given a parent process's page table, create a copy
// of it for a child.
pde_t*
copyuvm(pde_t *pgdir, uint sz)
{
  pde_t *d;
  pte_t *pte;
//   pte_t *pte_non_allocated_page;
  uint pa, i, flags;
  char *mem;

  if((d = setupkvm()) == 0)
    return 0;
  for(i = 0; i < sz; i += PGSIZE){
    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0) {
      continue;
//       panic("copyuvm: pte should exist");
    }
    if(!(*pte & PTE_P)) {
//       panic("copyuvm: page not present");
//       cprintf("copyuvm: page not present. position: %x. PTE is: %x\n", i, *pte);
//       pte_non_allocated_page = walkpgdir(d, (void *) i, 1);
//       *pte_non_allocated_page = *pte;
      continue;
//       mappages(d, (void*)i, PGSIZE, v2p(mem), flags)
      panic("dont panic..");
    }
    pa = PTE_ADDR(*pte);
    flags = PTE_FLAGS(*pte);
    if((mem = kalloc()) == 0)
      goto bad;
    memmove(mem, (char*)p2v(pa), PGSIZE);
    if(mappages(d, (void*)i, PGSIZE, v2p(mem), flags) < 0)
      goto bad;
  }
  return d;

bad:
  freevm(d);
  return 0;
}

//PAGEBREAK!
// Map user virtual address to kernel address.
char*
uva2ka(pde_t *pgdir, char *uva)
{
  pte_t *pte;
  
  pte = walkpgdir(pgdir, uva, 0);
  if((*pte & PTE_P) == 0)
    return 0;
  if((*pte & PTE_U) == 0)
    return 0;
  return (char*)p2v(PTE_ADDR(*pte));
}

// Copy len bytes from p to user address va in page table pgdir.
// Most useful when pgdir is not the current page table.
// uva2ka ensures this only works for PTE_U pages.
int
copyout(pde_t *pgdir, uint va, void *p, uint len)
{
  char *buf, *pa0;
  uint n, va0;
  
  buf = (char*)p;
  while(len > 0){
    va0 = (uint)PGROUNDDOWN(va);
    pa0 = uva2ka(pgdir, (char*)va0);
//     cprintf("1111111\n");
    if(pa0 == 0)
      return -1;
//     cprintf("1111112\n");
    n = PGSIZE - (va - va0);
    if(n > len)
      n = len;
    memmove(pa0 + (va - va0), buf, n);
    len -= n;
    buf += n;
    va = va0 + PGSIZE;
  }
//   cprintf("1111113\n");
  return 0;
}

//PAGEBREAK!
// Blank page.
//PAGEBREAK!
// Blank page.
//PAGEBREAK!
// Blank page.




// ------------------- TASK 2 - Lazy alloc -----------------------
// return True / False
int lazyPageAlloc(pde_t * proc_pgdir, uint target_va) {
  char *mem;
  uint a;
  a = PGROUNDDOWN(target_va);
  mem = kalloc();
  if(mem == 0){
      cprintf("Lazy list failed - out of memory\n");
      return 0; // return False
  }
  
  memset(mem, 0, PGSIZE);
  if( -1 == mappages(proc_pgdir, (char*)a, PGSIZE, v2p(mem), PTE_W|PTE_U)) {
    cprintf("Lazy list failed - mappages failed\n");
    return 0; // retrun false
  }
  // To keep for debug of ass3test!
  //cprintf("\tlazyPageAlloc. successfully mapped vaddr: %x to physical page: %x\n", a, v2p(mem));
  
  return 1; // return True
}


//------------------------------------------- TLB implementation --------------------------------
uint mappedTLB[2] = {0};
uint mappedTLBnumber = 0;

void safe_TLB_free(pde_t * ker_pgdir, int num) {
  pte_t * pte;
  switch (num) {
    case 2:
      if( &ker_pgdir[PDX(mappedTLB[1])] == &ker_pgdir[PDX(mappedTLB[0])] ) { // they are on the same page table...
// 	cprintf("on same page\n");
	pte = walkpgdir(ker_pgdir, (void*)mappedTLB[1], 0);
	*pte = 0;
			// 	this is bad!! ker_pgdir[PDX(mappedTLB[1])] = 0;
	mappedTLB[1] = 0;
      } else {
	if (ker_pgdir[PDX(mappedTLB[1])] & PTE_P) {
// 	  cprintf("notttt on same page and 2 is present\n");
	  kfree(p2v(PTE_ADDR(ker_pgdir[PDX(mappedTLB[1])])));
	  ker_pgdir[PDX(mappedTLB[1])] = 0;
	  mappedTLB[1] = 0;
	} else {
	  cprintf("\t\t\t\tsafe_TLB_free wried 2\n");
	}
      }
      break;
    case 1:
      if (ker_pgdir[PDX(mappedTLB[0])] & PTE_P) {
	kfree(p2v(PTE_ADDR(ker_pgdir[PDX(mappedTLB[0])])));
	ker_pgdir[PDX(mappedTLB[0])] = 0;
	mappedTLB[0] = 0;
      } else {
	cprintf("\t\t\t\tsafe_TLB_free wried 1\n");
      }
      break;
    case 0:
      break;
    default:
      panic("safe_TLB_free");
  }
}

int TLBMap1(pde_t * proc_pgdir, pde_t * ker_pgdir, void* target_va, uint sp_addr) {
  pte_t * proc_pte;
  pte_t * ker_pte;
  pte_t * ker_temp_pte;
  
//   uint temp1;
//   uint temp2;
//   uint temp;
  
//   cprintf("TLBMap start: %d\n", mappedTLBnumber);
  // find user PTE
  proc_pte = walkpgdir(proc_pgdir, target_va, 0);
  if(proc_pte == 0 || *proc_pte == 0) {
//      cprintf("==========TLBMap - real page fault cause user tried to access invalid vaddr: %x\n", target_va);
    
    if ((uint)target_va < proc->sz) {//PGROUNDUP(proc->sz)) { // this is a page fault in the process heap area
//       cprintf("==========(uint)target_va < proc->sz\n");
//       cprintf("%d\n",PGROUNDDOWN(proc->guardPage) == PGROUNDDOWN((uint)sp_addr));// , is_cpu_user == 1);
      if (PGROUNDDOWN(proc->guardPage) == PGROUNDDOWN((uint)sp_addr) ){//&& is_cpu_user == 1) {
	cprintf("\tAccess to page guard has been detected. terminating\n");
	return 0;
      }
  
      return lazyPageAlloc(proc_pgdir, (uint) target_va);
    } 
    
    // error occured, no pte pointing to destination target!
    return 0;
  } else {
//     cprintf("TLBMap - found pte in user directory. pte: %x\n", proc_pte);
  }
  
//   cprintf("user wants to map: %x\n", target_va);
  
  if ( mappedTLBnumber == 2 ) { // we need to free one cause of the limit

      if( &ker_pgdir[PDX(mappedTLB[1])] != &ker_pgdir[PDX(mappedTLB[0])] ) { // they are on the same page table...
/*



    temp1 = (uint)p2v(PTE_ADDR(ker_pgdir[PDX(mappedTLB[0])]));
    temp2 = (uint)p2v(PTE_ADDR(ker_pgdir[PDX(mappedTLB[1])]));
    if ( temp1 != temp2) { // they are in different pages. free the first page
*/
		// free the first page
//	cprintf("\nTLBMap_safe_TLB_free_release_first\n");
	safe_TLB_free(ker_pgdir, 1);
	/*
	temp = ker_pgdir[PDX(mappedTLB[0])];
	if ( temp & PTE_P ) {
	  cprintf("pgdir at the relevant index is: %x\n", ker_pgdir[PDX(mappedTLB[0])]);
	  cprintf("page tables addresses: %x  %x\n", temp1, temp2);
	  cprintf("addresses mapped: %x  %x\n", mappedTLB[0], mappedTLB[1]);
	  cprintf("TLBMap free the first. the user tried to access: %x...\n", mappedTLB[0]);
	  kfree(p2v(PTE_ADDR(ker_pgdir[PDX(mappedTLB[0])])));
	}*/
    } else { // they are on the same pages
	ker_temp_pte = walkpgdir(ker_pgdir, (void*)mappedTLB[0], 0);
	*ker_temp_pte = 0;
    }
	  // // zero the index of first  BUGGGGGGG
	  // ker_pgdir[PDX(mappedTLB[0])] = 0;  //BUGGGGGGG
    // move them
    mappedTLB[0] = mappedTLB[1];
    mappedTLB[1] = 0;
    mappedTLBnumber-=1;
  }
  
  // attach to kernel PTE
  if((ker_pte = walkpgdir(ker_pgdir, target_va, 1)) == 0) {
    cprintf("TLBMap - ker_pte failed to be allocated\n");
    // error occured, no pte pointing to destination target!
    return 0;
  }
  
  
  //p2v(PTE_ADDR(ker_pgdir[PDX(target_va)]));
  /*
  cprintf("TRYING TO REVERSE, address will be used for kfree: %x\n",p2v(PTE_ADDR(ker_pgdir[PDX(target_va)])));
  
  cprintf("before - kernel : %x\n",*ker_pte);
  cprintf("before - user : %x\n",*proc_pte);
  */
  *ker_pte = *proc_pte;
//   cprintf("after - kernel : %x\n",*ker_pte);
  
  mappedTLB[mappedTLBnumber] = (uint)target_va;
  mappedTLBnumber +=1;

//   cprintf("TLBMap end: %d\n", mappedTLBnumber);
  return 1;
}


int TLBMap(pde_t * proc_pgdir, pde_t * ker_pgdir, void* target_va, int sp_addr) {
  int i;
  pushcli();
  i =  TLBMap1(proc_pgdir, ker_pgdir, target_va, sp_addr);
  popcli();
  return i;
}


void clearTLB(pde_t * ker_pgdir) {
//   cprintf("clearTLB start: %d\n", mappedTLBnumber);
  switch(mappedTLBnumber) {
    case 0:
//        cprintf("\tcase 0\n");
      break;
    case 1:
//          cprintf("\tcase 1\n");
//        cprintf("clearTLB: target_addr mappedTLB[0]: %x, sending to kfree: %x\n", mappedTLB[0], p2v(PTE_ADDR(ker_pgdir[PDX(mappedTLB[0])])));
      safe_TLB_free(ker_pgdir, 1);
      /*
      if ( ker_pgdir[PDX(mappedTLB[0])] & PTE_P ) {
	kfree(p2v(PTE_ADDR(ker_pgdir[PDX(mappedTLB[0])])));
	ker_pgdir[PDX(mappedTLB[0])] = 0;
      }*/
//       mappedTLB[0] = 0;
      break;
    case 2:
//       cprintf("\tcase 2\n");
      safe_TLB_free(ker_pgdir, 2);
      safe_TLB_free(ker_pgdir, 1);
      /*
      if (	p2v(PTE_ADDR(ker_pgdir[PDX(mappedTLB[0])])) !=
		    p2v(PTE_ADDR(ker_pgdir[PDX(mappedTLB[1])]))) { // they are in different pages.
	    if ( ker_pgdir[PDX(mappedTLB[0])] & PTE_P ) {
	    kfree(p2v(PTE_ADDR(ker_pgdir[PDX(mappedTLB[0])]))); // free the first page
	    kfree(p2v(PTE_ADDR(ker_pgdir[PDX(mappedTLB[1])]))); // free the second page
	    ker_pgdir[PDX(mappedTLB[0])] = 0;
	    ker_pgdir[PDX(mappedTLB[1])] = 0;
	} else {
	  kfree(p2v(PTE_ADDR(ker_pgdir[PDX(mappedTLB[0])]))); // free the first page
	  ker_pgdir[PDX(mappedTLB[0])] = 0;
	}
	*/
//       mappedTLB[0] = 0;
//       mappedTLB[1] = 0;
      break;
    default:
      panic("mappedTLBnumber error!");
  }
  mappedTLB[1] = 0;
  mappedTLB[0] = 0;
      
  mappedTLBnumber = 0;
//   cprintf("clearTLB end: %d\n", mappedTLBnumber);
}

void clearpteuTask2(pde_t *pgdir, char *uva) {
  pte_t *pte;
  pte_t *pte_stack;

  pte = walkpgdir(pgdir, uva, 1);
  pte_stack = walkpgdir(pgdir, uva + 1*PGSIZE, 0);
  *pte = *pte_stack;
  *pte &= ~PTE_U;
}